<?php
/**
 * CharacterApi
 * PHP version 5
 *
 * @category Class
 * @package  EsiClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
* EVE Swagger Interface
 *
* An OpenAPI for EVE Online
 *
* OpenAPI spec version: 0.8.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.4
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace EsiClient\EsiClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use EsiClient\ApiException;
use EsiClient\Configuration;
use EsiClient\HeaderSelector;
use EsiClient\ObjectSerializer;

/**
 * CharacterApi Class Doc Comment
 *
 * @category Class
 * @package  EsiClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CharacterApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }
    /**
     * Operation getCharactersCharacterId
*
     * Get character's public information
*
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
*
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function getCharactersCharacterId($character_id, $datasource = null, $if_none_match = null)
    {
        list($response) = $this->getCharactersCharacterIdWithHttpInfo($character_id, $datasource, $if_none_match);
        return $response;
    }

    /**
     * Operation getCharactersCharacterIdWithHttpInfo
*
     * Get character's public information
*
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
*
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCharactersCharacterIdWithHttpInfo($character_id, $datasource = null, $if_none_match = null)
    {
        $returnType = 'object';
        $request = $this->getCharactersCharacterIdRequest($character_id, $datasource, $if_none_match);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

$responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
case 200:$data = ObjectSerializer::deserialize(
                        $content,
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 400:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 404:$data = ObjectSerializer::deserialize(
                        $content,
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 420:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 500:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 503:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 504:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
}
            throw $e;
        }
    }

    /**
     * Operation getCharactersCharacterIdAsync
     *
     * Get character's public information
     *
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdAsync($character_id, $datasource = null, $if_none_match = null)
    {
        return $this->getCharactersCharacterIdAsyncWithHttpInfo($character_id, $datasource, $if_none_match)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCharactersCharacterIdAsyncWithHttpInfo
     *
     * Get character's public information
     *
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdAsyncWithHttpInfo($character_id, $datasource = null, $if_none_match = null)
    {
        $returnType = 'object';
        $request = $this->getCharactersCharacterIdRequest($character_id, $datasource, $if_none_match);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
$responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCharactersCharacterId'
     *
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCharactersCharacterIdRequest($character_id, $datasource = null, $if_none_match = null)
    {
// verify the required parameter 'character_id' is set
        if ($character_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $character_id when calling getCharactersCharacterId'
            );
        }
if ($character_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$character_id" when calling CharacterApi.getCharactersCharacterId, must be bigger than or equal to 1.');
        }
$resourcePath = '/v4/characters/{character_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

// query params
if ($datasource !== null) {
            $queryParams['datasource'] = ObjectSerializer::toQueryValue($datasource);
        }
// header params
if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
// path params
if ($character_id !== null) {
            $resourcePath = str_replace(
                '{' . 'character_id' . '}',
                ObjectSerializer::toPathValue($character_id),
                $resourcePath
            );
        }
// body params
        $_tempBody = null;
if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
$defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCharactersCharacterIdAgentsResearch
*
     * Get agents research
*
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object[]
     */
    public function getCharactersCharacterIdAgentsResearch($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
        list($response) = $this->getCharactersCharacterIdAgentsResearchWithHttpInfo($character_id, $datasource, $if_none_match, $token);
        return $response;
    }

    /**
     * Operation getCharactersCharacterIdAgentsResearchWithHttpInfo
*
     * Get agents research
*
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCharactersCharacterIdAgentsResearchWithHttpInfo($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
        $returnType = 'object[]';
        $request = $this->getCharactersCharacterIdAgentsResearchRequest($character_id, $datasource, $if_none_match, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

$responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
case 200:$data = ObjectSerializer::deserialize(
                        $content,
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 400:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 401:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 403:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 420:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 500:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 503:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 504:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
}
            throw $e;
        }
    }

    /**
     * Operation getCharactersCharacterIdAgentsResearchAsync
     *
     * Get agents research
     *
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdAgentsResearchAsync($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
        return $this->getCharactersCharacterIdAgentsResearchAsyncWithHttpInfo($character_id, $datasource, $if_none_match, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCharactersCharacterIdAgentsResearchAsyncWithHttpInfo
     *
     * Get agents research
     *
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdAgentsResearchAsyncWithHttpInfo($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
        $returnType = 'object[]';
        $request = $this->getCharactersCharacterIdAgentsResearchRequest($character_id, $datasource, $if_none_match, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
$responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCharactersCharacterIdAgentsResearch'
     *
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCharactersCharacterIdAgentsResearchRequest($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
// verify the required parameter 'character_id' is set
        if ($character_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $character_id when calling getCharactersCharacterIdAgentsResearch'
            );
        }
if ($character_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$character_id" when calling CharacterApi.getCharactersCharacterIdAgentsResearch, must be bigger than or equal to 1.');
        }
$resourcePath = '/v1/characters/{character_id}/agents_research/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

// query params
if ($datasource !== null) {
            $queryParams['datasource'] = ObjectSerializer::toQueryValue($datasource);
        }
// query params
if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token);
        }
// header params
if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
// path params
if ($character_id !== null) {
            $resourcePath = str_replace(
                '{' . 'character_id' . '}',
                ObjectSerializer::toPathValue($character_id),
                $resourcePath
            );
        }
// body params
        $_tempBody = null;
if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
// this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
$defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCharactersCharacterIdBlueprints
*
     * Get blueprints
*
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  int $page Which page of results to return (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object[]
     */
    public function getCharactersCharacterIdBlueprints($character_id, $datasource = null, $if_none_match = null, $page = null, $token = null)
    {
        list($response) = $this->getCharactersCharacterIdBlueprintsWithHttpInfo($character_id, $datasource, $if_none_match, $page, $token);
        return $response;
    }

    /**
     * Operation getCharactersCharacterIdBlueprintsWithHttpInfo
*
     * Get blueprints
*
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  int $page Which page of results to return (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCharactersCharacterIdBlueprintsWithHttpInfo($character_id, $datasource = null, $if_none_match = null, $page = null, $token = null)
    {
        $returnType = 'object[]';
        $request = $this->getCharactersCharacterIdBlueprintsRequest($character_id, $datasource, $if_none_match, $page, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

$responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
case 200:$data = ObjectSerializer::deserialize(
                        $content,
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 400:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 401:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 403:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 420:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 500:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 503:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 504:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
}
            throw $e;
        }
    }

    /**
     * Operation getCharactersCharacterIdBlueprintsAsync
     *
     * Get blueprints
     *
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  int $page Which page of results to return (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdBlueprintsAsync($character_id, $datasource = null, $if_none_match = null, $page = null, $token = null)
    {
        return $this->getCharactersCharacterIdBlueprintsAsyncWithHttpInfo($character_id, $datasource, $if_none_match, $page, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCharactersCharacterIdBlueprintsAsyncWithHttpInfo
     *
     * Get blueprints
     *
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  int $page Which page of results to return (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdBlueprintsAsyncWithHttpInfo($character_id, $datasource = null, $if_none_match = null, $page = null, $token = null)
    {
        $returnType = 'object[]';
        $request = $this->getCharactersCharacterIdBlueprintsRequest($character_id, $datasource, $if_none_match, $page, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
$responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCharactersCharacterIdBlueprints'
     *
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  int $page Which page of results to return (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCharactersCharacterIdBlueprintsRequest($character_id, $datasource = null, $if_none_match = null, $page = null, $token = null)
    {
// verify the required parameter 'character_id' is set
        if ($character_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $character_id when calling getCharactersCharacterIdBlueprints'
            );
        }
if ($character_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$character_id" when calling CharacterApi.getCharactersCharacterIdBlueprints, must be bigger than or equal to 1.');
        }
if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling CharacterApi.getCharactersCharacterIdBlueprints, must be bigger than or equal to 1.');
        }
$resourcePath = '/v2/characters/{character_id}/blueprints/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

// query params
if ($datasource !== null) {
            $queryParams['datasource'] = ObjectSerializer::toQueryValue($datasource);
        }
// query params
if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
// query params
if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token);
        }
// header params
if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
// path params
if ($character_id !== null) {
            $resourcePath = str_replace(
                '{' . 'character_id' . '}',
                ObjectSerializer::toPathValue($character_id),
                $resourcePath
            );
        }
// body params
        $_tempBody = null;
if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
// this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
$defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCharactersCharacterIdCorporationhistory
*
     * Get corporation history
*
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
*
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object[]
     */
    public function getCharactersCharacterIdCorporationhistory($character_id, $datasource = null, $if_none_match = null)
    {
        list($response) = $this->getCharactersCharacterIdCorporationhistoryWithHttpInfo($character_id, $datasource, $if_none_match);
        return $response;
    }

    /**
     * Operation getCharactersCharacterIdCorporationhistoryWithHttpInfo
*
     * Get corporation history
*
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
*
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCharactersCharacterIdCorporationhistoryWithHttpInfo($character_id, $datasource = null, $if_none_match = null)
    {
        $returnType = 'object[]';
        $request = $this->getCharactersCharacterIdCorporationhistoryRequest($character_id, $datasource, $if_none_match);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

$responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
case 200:$data = ObjectSerializer::deserialize(
                        $content,
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 400:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 420:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 500:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 503:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 504:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
}
            throw $e;
        }
    }

    /**
     * Operation getCharactersCharacterIdCorporationhistoryAsync
     *
     * Get corporation history
     *
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdCorporationhistoryAsync($character_id, $datasource = null, $if_none_match = null)
    {
        return $this->getCharactersCharacterIdCorporationhistoryAsyncWithHttpInfo($character_id, $datasource, $if_none_match)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCharactersCharacterIdCorporationhistoryAsyncWithHttpInfo
     *
     * Get corporation history
     *
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdCorporationhistoryAsyncWithHttpInfo($character_id, $datasource = null, $if_none_match = null)
    {
        $returnType = 'object[]';
        $request = $this->getCharactersCharacterIdCorporationhistoryRequest($character_id, $datasource, $if_none_match);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
$responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCharactersCharacterIdCorporationhistory'
     *
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCharactersCharacterIdCorporationhistoryRequest($character_id, $datasource = null, $if_none_match = null)
    {
// verify the required parameter 'character_id' is set
        if ($character_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $character_id when calling getCharactersCharacterIdCorporationhistory'
            );
        }
if ($character_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$character_id" when calling CharacterApi.getCharactersCharacterIdCorporationhistory, must be bigger than or equal to 1.');
        }
$resourcePath = '/v1/characters/{character_id}/corporationhistory/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

// query params
if ($datasource !== null) {
            $queryParams['datasource'] = ObjectSerializer::toQueryValue($datasource);
        }
// header params
if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
// path params
if ($character_id !== null) {
            $resourcePath = str_replace(
                '{' . 'character_id' . '}',
                ObjectSerializer::toPathValue($character_id),
                $resourcePath
            );
        }
// body params
        $_tempBody = null;
if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
$defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCharactersCharacterIdFatigue
*
     * Get jump fatigue
*
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function getCharactersCharacterIdFatigue($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
        list($response) = $this->getCharactersCharacterIdFatigueWithHttpInfo($character_id, $datasource, $if_none_match, $token);
        return $response;
    }

    /**
     * Operation getCharactersCharacterIdFatigueWithHttpInfo
*
     * Get jump fatigue
*
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCharactersCharacterIdFatigueWithHttpInfo($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
        $returnType = 'object';
        $request = $this->getCharactersCharacterIdFatigueRequest($character_id, $datasource, $if_none_match, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

$responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
case 200:$data = ObjectSerializer::deserialize(
                        $content,
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 400:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 401:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 403:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 420:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 500:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 503:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 504:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
}
            throw $e;
        }
    }

    /**
     * Operation getCharactersCharacterIdFatigueAsync
     *
     * Get jump fatigue
     *
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdFatigueAsync($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
        return $this->getCharactersCharacterIdFatigueAsyncWithHttpInfo($character_id, $datasource, $if_none_match, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCharactersCharacterIdFatigueAsyncWithHttpInfo
     *
     * Get jump fatigue
     *
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdFatigueAsyncWithHttpInfo($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
        $returnType = 'object';
        $request = $this->getCharactersCharacterIdFatigueRequest($character_id, $datasource, $if_none_match, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
$responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCharactersCharacterIdFatigue'
     *
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCharactersCharacterIdFatigueRequest($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
// verify the required parameter 'character_id' is set
        if ($character_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $character_id when calling getCharactersCharacterIdFatigue'
            );
        }
if ($character_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$character_id" when calling CharacterApi.getCharactersCharacterIdFatigue, must be bigger than or equal to 1.');
        }
$resourcePath = '/v1/characters/{character_id}/fatigue/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

// query params
if ($datasource !== null) {
            $queryParams['datasource'] = ObjectSerializer::toQueryValue($datasource);
        }
// query params
if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token);
        }
// header params
if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
// path params
if ($character_id !== null) {
            $resourcePath = str_replace(
                '{' . 'character_id' . '}',
                ObjectSerializer::toPathValue($character_id),
                $resourcePath
            );
        }
// body params
        $_tempBody = null;
if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
// this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
$defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCharactersCharacterIdMedals
*
     * Get medals
*
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object[]
     */
    public function getCharactersCharacterIdMedals($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
        list($response) = $this->getCharactersCharacterIdMedalsWithHttpInfo($character_id, $datasource, $if_none_match, $token);
        return $response;
    }

    /**
     * Operation getCharactersCharacterIdMedalsWithHttpInfo
*
     * Get medals
*
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCharactersCharacterIdMedalsWithHttpInfo($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
        $returnType = 'object[]';
        $request = $this->getCharactersCharacterIdMedalsRequest($character_id, $datasource, $if_none_match, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

$responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
case 200:$data = ObjectSerializer::deserialize(
                        $content,
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 400:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 401:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 403:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 420:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 500:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 503:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 504:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
}
            throw $e;
        }
    }

    /**
     * Operation getCharactersCharacterIdMedalsAsync
     *
     * Get medals
     *
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdMedalsAsync($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
        return $this->getCharactersCharacterIdMedalsAsyncWithHttpInfo($character_id, $datasource, $if_none_match, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCharactersCharacterIdMedalsAsyncWithHttpInfo
     *
     * Get medals
     *
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdMedalsAsyncWithHttpInfo($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
        $returnType = 'object[]';
        $request = $this->getCharactersCharacterIdMedalsRequest($character_id, $datasource, $if_none_match, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
$responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCharactersCharacterIdMedals'
     *
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCharactersCharacterIdMedalsRequest($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
// verify the required parameter 'character_id' is set
        if ($character_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $character_id when calling getCharactersCharacterIdMedals'
            );
        }
if ($character_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$character_id" when calling CharacterApi.getCharactersCharacterIdMedals, must be bigger than or equal to 1.');
        }
$resourcePath = '/v1/characters/{character_id}/medals/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

// query params
if ($datasource !== null) {
            $queryParams['datasource'] = ObjectSerializer::toQueryValue($datasource);
        }
// query params
if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token);
        }
// header params
if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
// path params
if ($character_id !== null) {
            $resourcePath = str_replace(
                '{' . 'character_id' . '}',
                ObjectSerializer::toPathValue($character_id),
                $resourcePath
            );
        }
// body params
        $_tempBody = null;
if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
// this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
$defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCharactersCharacterIdNotifications
*
     * Get character notifications
*
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object[]
     */
    public function getCharactersCharacterIdNotifications($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
        list($response) = $this->getCharactersCharacterIdNotificationsWithHttpInfo($character_id, $datasource, $if_none_match, $token);
        return $response;
    }

    /**
     * Operation getCharactersCharacterIdNotificationsWithHttpInfo
*
     * Get character notifications
*
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCharactersCharacterIdNotificationsWithHttpInfo($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
        $returnType = 'object[]';
        $request = $this->getCharactersCharacterIdNotificationsRequest($character_id, $datasource, $if_none_match, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

$responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
case 200:$data = ObjectSerializer::deserialize(
                        $content,
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 400:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 401:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 403:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 420:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 500:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 503:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 504:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
}
            throw $e;
        }
    }

    /**
     * Operation getCharactersCharacterIdNotificationsAsync
     *
     * Get character notifications
     *
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdNotificationsAsync($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
        return $this->getCharactersCharacterIdNotificationsAsyncWithHttpInfo($character_id, $datasource, $if_none_match, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCharactersCharacterIdNotificationsAsyncWithHttpInfo
     *
     * Get character notifications
     *
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdNotificationsAsyncWithHttpInfo($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
        $returnType = 'object[]';
        $request = $this->getCharactersCharacterIdNotificationsRequest($character_id, $datasource, $if_none_match, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
$responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCharactersCharacterIdNotifications'
     *
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCharactersCharacterIdNotificationsRequest($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
// verify the required parameter 'character_id' is set
        if ($character_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $character_id when calling getCharactersCharacterIdNotifications'
            );
        }
if ($character_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$character_id" when calling CharacterApi.getCharactersCharacterIdNotifications, must be bigger than or equal to 1.');
        }
$resourcePath = '/v4/characters/{character_id}/notifications/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

// query params
if ($datasource !== null) {
            $queryParams['datasource'] = ObjectSerializer::toQueryValue($datasource);
        }
// query params
if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token);
        }
// header params
if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
// path params
if ($character_id !== null) {
            $resourcePath = str_replace(
                '{' . 'character_id' . '}',
                ObjectSerializer::toPathValue($character_id),
                $resourcePath
            );
        }
// body params
        $_tempBody = null;
if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
// this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
$defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCharactersCharacterIdNotificationsContacts
*
     * Get new contact notifications
*
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object[]
     */
    public function getCharactersCharacterIdNotificationsContacts($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
        list($response) = $this->getCharactersCharacterIdNotificationsContactsWithHttpInfo($character_id, $datasource, $if_none_match, $token);
        return $response;
    }

    /**
     * Operation getCharactersCharacterIdNotificationsContactsWithHttpInfo
*
     * Get new contact notifications
*
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCharactersCharacterIdNotificationsContactsWithHttpInfo($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
        $returnType = 'object[]';
        $request = $this->getCharactersCharacterIdNotificationsContactsRequest($character_id, $datasource, $if_none_match, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

$responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
case 200:$data = ObjectSerializer::deserialize(
                        $content,
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 400:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 401:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 403:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 420:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 500:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 503:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 504:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
}
            throw $e;
        }
    }

    /**
     * Operation getCharactersCharacterIdNotificationsContactsAsync
     *
     * Get new contact notifications
     *
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdNotificationsContactsAsync($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
        return $this->getCharactersCharacterIdNotificationsContactsAsyncWithHttpInfo($character_id, $datasource, $if_none_match, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCharactersCharacterIdNotificationsContactsAsyncWithHttpInfo
     *
     * Get new contact notifications
     *
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdNotificationsContactsAsyncWithHttpInfo($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
        $returnType = 'object[]';
        $request = $this->getCharactersCharacterIdNotificationsContactsRequest($character_id, $datasource, $if_none_match, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
$responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCharactersCharacterIdNotificationsContacts'
     *
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCharactersCharacterIdNotificationsContactsRequest($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
// verify the required parameter 'character_id' is set
        if ($character_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $character_id when calling getCharactersCharacterIdNotificationsContacts'
            );
        }
if ($character_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$character_id" when calling CharacterApi.getCharactersCharacterIdNotificationsContacts, must be bigger than or equal to 1.');
        }
$resourcePath = '/v1/characters/{character_id}/notifications/contacts/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

// query params
if ($datasource !== null) {
            $queryParams['datasource'] = ObjectSerializer::toQueryValue($datasource);
        }
// query params
if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token);
        }
// header params
if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
// path params
if ($character_id !== null) {
            $resourcePath = str_replace(
                '{' . 'character_id' . '}',
                ObjectSerializer::toPathValue($character_id),
                $resourcePath
            );
        }
// body params
        $_tempBody = null;
if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
// this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
$defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCharactersCharacterIdPortrait
*
     * Get character portraits
*
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
*
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function getCharactersCharacterIdPortrait($character_id, $datasource = null, $if_none_match = null)
    {
        list($response) = $this->getCharactersCharacterIdPortraitWithHttpInfo($character_id, $datasource, $if_none_match);
        return $response;
    }

    /**
     * Operation getCharactersCharacterIdPortraitWithHttpInfo
*
     * Get character portraits
*
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
*
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCharactersCharacterIdPortraitWithHttpInfo($character_id, $datasource = null, $if_none_match = null)
    {
        $returnType = 'object';
        $request = $this->getCharactersCharacterIdPortraitRequest($character_id, $datasource, $if_none_match);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

$responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
case 200:$data = ObjectSerializer::deserialize(
                        $content,
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 400:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 404:$data = ObjectSerializer::deserialize(
                        $content,
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 420:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 500:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 503:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 504:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
}
            throw $e;
        }
    }

    /**
     * Operation getCharactersCharacterIdPortraitAsync
     *
     * Get character portraits
     *
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdPortraitAsync($character_id, $datasource = null, $if_none_match = null)
    {
        return $this->getCharactersCharacterIdPortraitAsyncWithHttpInfo($character_id, $datasource, $if_none_match)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCharactersCharacterIdPortraitAsyncWithHttpInfo
     *
     * Get character portraits
     *
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdPortraitAsyncWithHttpInfo($character_id, $datasource = null, $if_none_match = null)
    {
        $returnType = 'object';
        $request = $this->getCharactersCharacterIdPortraitRequest($character_id, $datasource, $if_none_match);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
$responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCharactersCharacterIdPortrait'
     *
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCharactersCharacterIdPortraitRequest($character_id, $datasource = null, $if_none_match = null)
    {
// verify the required parameter 'character_id' is set
        if ($character_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $character_id when calling getCharactersCharacterIdPortrait'
            );
        }
if ($character_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$character_id" when calling CharacterApi.getCharactersCharacterIdPortrait, must be bigger than or equal to 1.');
        }
$resourcePath = '/v2/characters/{character_id}/portrait/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

// query params
if ($datasource !== null) {
            $queryParams['datasource'] = ObjectSerializer::toQueryValue($datasource);
        }
// header params
if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
// path params
if ($character_id !== null) {
            $resourcePath = str_replace(
                '{' . 'character_id' . '}',
                ObjectSerializer::toPathValue($character_id),
                $resourcePath
            );
        }
// body params
        $_tempBody = null;
if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
$defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCharactersCharacterIdRoles
*
     * Get character corporation roles
*
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function getCharactersCharacterIdRoles($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
        list($response) = $this->getCharactersCharacterIdRolesWithHttpInfo($character_id, $datasource, $if_none_match, $token);
        return $response;
    }

    /**
     * Operation getCharactersCharacterIdRolesWithHttpInfo
*
     * Get character corporation roles
*
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCharactersCharacterIdRolesWithHttpInfo($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
        $returnType = 'object';
        $request = $this->getCharactersCharacterIdRolesRequest($character_id, $datasource, $if_none_match, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

$responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
case 200:$data = ObjectSerializer::deserialize(
                        $content,
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 400:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 401:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 403:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 420:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 500:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 503:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 504:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
}
            throw $e;
        }
    }

    /**
     * Operation getCharactersCharacterIdRolesAsync
     *
     * Get character corporation roles
     *
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdRolesAsync($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
        return $this->getCharactersCharacterIdRolesAsyncWithHttpInfo($character_id, $datasource, $if_none_match, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCharactersCharacterIdRolesAsyncWithHttpInfo
     *
     * Get character corporation roles
     *
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdRolesAsyncWithHttpInfo($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
        $returnType = 'object';
        $request = $this->getCharactersCharacterIdRolesRequest($character_id, $datasource, $if_none_match, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
$responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCharactersCharacterIdRoles'
     *
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCharactersCharacterIdRolesRequest($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
// verify the required parameter 'character_id' is set
        if ($character_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $character_id when calling getCharactersCharacterIdRoles'
            );
        }
if ($character_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$character_id" when calling CharacterApi.getCharactersCharacterIdRoles, must be bigger than or equal to 1.');
        }
$resourcePath = '/v2/characters/{character_id}/roles/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

// query params
if ($datasource !== null) {
            $queryParams['datasource'] = ObjectSerializer::toQueryValue($datasource);
        }
// query params
if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token);
        }
// header params
if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
// path params
if ($character_id !== null) {
            $resourcePath = str_replace(
                '{' . 'character_id' . '}',
                ObjectSerializer::toPathValue($character_id),
                $resourcePath
            );
        }
// body params
        $_tempBody = null;
if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
// this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
$defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCharactersCharacterIdStandings
*
     * Get standings
*
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object[]
     */
    public function getCharactersCharacterIdStandings($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
        list($response) = $this->getCharactersCharacterIdStandingsWithHttpInfo($character_id, $datasource, $if_none_match, $token);
        return $response;
    }

    /**
     * Operation getCharactersCharacterIdStandingsWithHttpInfo
*
     * Get standings
*
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCharactersCharacterIdStandingsWithHttpInfo($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
        $returnType = 'object[]';
        $request = $this->getCharactersCharacterIdStandingsRequest($character_id, $datasource, $if_none_match, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

$responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
case 200:$data = ObjectSerializer::deserialize(
                        $content,
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 400:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 401:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 403:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 420:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 500:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 503:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 504:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
}
            throw $e;
        }
    }

    /**
     * Operation getCharactersCharacterIdStandingsAsync
     *
     * Get standings
     *
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdStandingsAsync($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
        return $this->getCharactersCharacterIdStandingsAsyncWithHttpInfo($character_id, $datasource, $if_none_match, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCharactersCharacterIdStandingsAsyncWithHttpInfo
     *
     * Get standings
     *
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdStandingsAsyncWithHttpInfo($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
        $returnType = 'object[]';
        $request = $this->getCharactersCharacterIdStandingsRequest($character_id, $datasource, $if_none_match, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
$responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCharactersCharacterIdStandings'
     *
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCharactersCharacterIdStandingsRequest($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
// verify the required parameter 'character_id' is set
        if ($character_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $character_id when calling getCharactersCharacterIdStandings'
            );
        }
if ($character_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$character_id" when calling CharacterApi.getCharactersCharacterIdStandings, must be bigger than or equal to 1.');
        }
$resourcePath = '/v1/characters/{character_id}/standings/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

// query params
if ($datasource !== null) {
            $queryParams['datasource'] = ObjectSerializer::toQueryValue($datasource);
        }
// query params
if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token);
        }
// header params
if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
// path params
if ($character_id !== null) {
            $resourcePath = str_replace(
                '{' . 'character_id' . '}',
                ObjectSerializer::toPathValue($character_id),
                $resourcePath
            );
        }
// body params
        $_tempBody = null;
if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
// this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
$defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCharactersCharacterIdStats
*
     * Yearly aggregate stats
*
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object[]
     */
    public function getCharactersCharacterIdStats($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
        list($response) = $this->getCharactersCharacterIdStatsWithHttpInfo($character_id, $datasource, $if_none_match, $token);
        return $response;
    }

    /**
     * Operation getCharactersCharacterIdStatsWithHttpInfo
*
     * Yearly aggregate stats
*
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCharactersCharacterIdStatsWithHttpInfo($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
        $returnType = 'object[]';
        $request = $this->getCharactersCharacterIdStatsRequest($character_id, $datasource, $if_none_match, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

$responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
case 200:$data = ObjectSerializer::deserialize(
                        $content,
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 400:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 401:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 403:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 420:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 500:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 503:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 504:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
}
            throw $e;
        }
    }

    /**
     * Operation getCharactersCharacterIdStatsAsync
     *
     * Yearly aggregate stats
     *
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdStatsAsync($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
        return $this->getCharactersCharacterIdStatsAsyncWithHttpInfo($character_id, $datasource, $if_none_match, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCharactersCharacterIdStatsAsyncWithHttpInfo
     *
     * Yearly aggregate stats
     *
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdStatsAsyncWithHttpInfo($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
        $returnType = 'object[]';
        $request = $this->getCharactersCharacterIdStatsRequest($character_id, $datasource, $if_none_match, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
$responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCharactersCharacterIdStats'
     *
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCharactersCharacterIdStatsRequest($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
// verify the required parameter 'character_id' is set
        if ($character_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $character_id when calling getCharactersCharacterIdStats'
            );
        }
if ($character_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$character_id" when calling CharacterApi.getCharactersCharacterIdStats, must be bigger than or equal to 1.');
        }
$resourcePath = '/v2/characters/{character_id}/stats/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

// query params
if ($datasource !== null) {
            $queryParams['datasource'] = ObjectSerializer::toQueryValue($datasource);
        }
// query params
if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token);
        }
// header params
if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
// path params
if ($character_id !== null) {
            $resourcePath = str_replace(
                '{' . 'character_id' . '}',
                ObjectSerializer::toPathValue($character_id),
                $resourcePath
            );
        }
// body params
        $_tempBody = null;
if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
// this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
$defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCharactersCharacterIdTitles
*
     * Get character corporation titles
*
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object[]
     */
    public function getCharactersCharacterIdTitles($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
        list($response) = $this->getCharactersCharacterIdTitlesWithHttpInfo($character_id, $datasource, $if_none_match, $token);
        return $response;
    }

    /**
     * Operation getCharactersCharacterIdTitlesWithHttpInfo
*
     * Get character corporation titles
*
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCharactersCharacterIdTitlesWithHttpInfo($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
        $returnType = 'object[]';
        $request = $this->getCharactersCharacterIdTitlesRequest($character_id, $datasource, $if_none_match, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

$responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
case 200:$data = ObjectSerializer::deserialize(
                        $content,
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 400:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 401:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 403:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 420:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 500:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 503:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 504:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
}
            throw $e;
        }
    }

    /**
     * Operation getCharactersCharacterIdTitlesAsync
     *
     * Get character corporation titles
     *
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdTitlesAsync($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
        return $this->getCharactersCharacterIdTitlesAsyncWithHttpInfo($character_id, $datasource, $if_none_match, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCharactersCharacterIdTitlesAsyncWithHttpInfo
     *
     * Get character corporation titles
     *
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdTitlesAsyncWithHttpInfo($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
        $returnType = 'object[]';
        $request = $this->getCharactersCharacterIdTitlesRequest($character_id, $datasource, $if_none_match, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
$responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCharactersCharacterIdTitles'
     *
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCharactersCharacterIdTitlesRequest($character_id, $datasource = null, $if_none_match = null, $token = null)
    {
// verify the required parameter 'character_id' is set
        if ($character_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $character_id when calling getCharactersCharacterIdTitles'
            );
        }
if ($character_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$character_id" when calling CharacterApi.getCharactersCharacterIdTitles, must be bigger than or equal to 1.');
        }
$resourcePath = '/v1/characters/{character_id}/titles/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

// query params
if ($datasource !== null) {
            $queryParams['datasource'] = ObjectSerializer::toQueryValue($datasource);
        }
// query params
if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token);
        }
// header params
if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }
// path params
if ($character_id !== null) {
            $resourcePath = str_replace(
                '{' . 'character_id' . '}',
                ObjectSerializer::toPathValue($character_id),
                $resourcePath
            );
        }
// body params
        $_tempBody = null;
if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
// this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
$defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postCharactersAffiliation
*
     * Character affiliation
*
* @param  int[] $body The character IDs to fetch affiliations for. All characters must exist, or none will be returned (required)
* @param  string $datasource The server name you would like data from (optional)
*
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object[]
     */
    public function postCharactersAffiliation($body$datasource = null)
    {
        list($response) = $this->postCharactersAffiliationWithHttpInfo($body$datasource);
        return $response;
    }

    /**
     * Operation postCharactersAffiliationWithHttpInfo
*
     * Character affiliation
*
* @param  int[] $body The character IDs to fetch affiliations for. All characters must exist, or none will be returned (required)
* @param  string $datasource The server name you would like data from (optional)
*
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function postCharactersAffiliationWithHttpInfo($body$datasource = null)
    {
        $returnType = 'object[]';
        $request = $this->postCharactersAffiliationRequest($body$datasource);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

$responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
case 200:$data = ObjectSerializer::deserialize(
                        $content,
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 400:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 404:$data = ObjectSerializer::deserialize(
                        $content,
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 420:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 500:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 503:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 504:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
}
            throw $e;
        }
    }

    /**
     * Operation postCharactersAffiliationAsync
     *
     * Character affiliation
     *
* @param  int[] $body The character IDs to fetch affiliations for. All characters must exist, or none will be returned (required)
* @param  string $datasource The server name you would like data from (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCharactersAffiliationAsync($body$datasource = null)
    {
        return $this->postCharactersAffiliationAsyncWithHttpInfo($body$datasource)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postCharactersAffiliationAsyncWithHttpInfo
     *
     * Character affiliation
     *
* @param  int[] $body The character IDs to fetch affiliations for. All characters must exist, or none will be returned (required)
* @param  string $datasource The server name you would like data from (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCharactersAffiliationAsyncWithHttpInfo($body$datasource = null)
    {
        $returnType = 'object[]';
        $request = $this->postCharactersAffiliationRequest($body$datasource);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
$responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postCharactersAffiliation'
     *
* @param  int[] $body The character IDs to fetch affiliations for. All characters must exist, or none will be returned (required)
* @param  string $datasource The server name you would like data from (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postCharactersAffiliationRequest($body$datasource = null)
    {
// verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postCharactersAffiliation'
            );
        }
$resourcePath = '/v1/characters/affiliation/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

// query params
if ($datasource !== null) {
            $queryParams['datasource'] = ObjectSerializer::toQueryValue($datasource);
        }
// body params
        $_tempBody = null;
if (isset($body)) {
            $_tempBody = $body;
        }
if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
$defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postCharactersCharacterIdCspa
*
     * Calculate a CSPA charge cost
*
* @param  int[] $body The target characters to calculate the charge for (required)
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return float
     */
    public function postCharactersCharacterIdCspa($body$character_id, $datasource = null, $token = null)
    {
        list($response) = $this->postCharactersCharacterIdCspaWithHttpInfo($body$character_id, $datasource, $token);
        return $response;
    }

    /**
     * Operation postCharactersCharacterIdCspaWithHttpInfo
*
     * Calculate a CSPA charge cost
*
* @param  int[] $body The target characters to calculate the charge for (required)
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of float, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCharactersCharacterIdCspaWithHttpInfo($body$character_id, $datasource = null, $token = null)
    {
        $returnType = 'float';
        $request = $this->postCharactersCharacterIdCspaRequest($body$character_id, $datasource, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

$responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];


        } catch (ApiException $e) {
            $returnType = '';
            $content = $e->getResponseBody();
            if ($returnType !== '\SplFileObject') {
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }
            switch ($e->getCode()) {
case 201:$data = ObjectSerializer::deserialize(
                        $content,
                        'float',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 400:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 401:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 403:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 420:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 500:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 503:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
case 504:$data = ObjectSerializer::deserialize(
                        $content,
                        '\EsiClient\EsiClient\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
}
            throw $e;
        }
    }

    /**
     * Operation postCharactersCharacterIdCspaAsync
     *
     * Calculate a CSPA charge cost
     *
* @param  int[] $body The target characters to calculate the charge for (required)
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCharactersCharacterIdCspaAsync($body$character_id, $datasource = null, $token = null)
    {
        return $this->postCharactersCharacterIdCspaAsyncWithHttpInfo($body$character_id, $datasource, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postCharactersCharacterIdCspaAsyncWithHttpInfo
     *
     * Calculate a CSPA charge cost
     *
* @param  int[] $body The target characters to calculate the charge for (required)
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCharactersCharacterIdCspaAsyncWithHttpInfo($body$character_id, $datasource = null, $token = null)
    {
        $returnType = 'float';
        $request = $this->postCharactersCharacterIdCspaRequest($body$character_id, $datasource, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
$responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postCharactersCharacterIdCspa'
     *
* @param  int[] $body The target characters to calculate the charge for (required)
* @param  int $character_id An EVE character ID (required)
* @param  string $datasource The server name you would like data from (optional)
* @param  string $token Access token to use if unable to set a header (optional)
*
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postCharactersCharacterIdCspaRequest($body$character_id, $datasource = null, $token = null)
    {
// verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postCharactersCharacterIdCspa'
            );
        }
// verify the required parameter 'character_id' is set
        if ($character_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $character_id when calling postCharactersCharacterIdCspa'
            );
        }
if ($character_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$character_id" when calling CharacterApi.postCharactersCharacterIdCspa, must be bigger than or equal to 1.');
        }
$resourcePath = '/v4/characters/{character_id}/cspa/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

// query params
if ($datasource !== null) {
            $queryParams['datasource'] = ObjectSerializer::toQueryValue($datasource);
        }
// query params
if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token);
        }
// path params
if ($character_id !== null) {
            $resourcePath = str_replace(
                '{' . 'character_id' . '}',
                ObjectSerializer::toPathValue($character_id),
                $resourcePath
            );
        }
// body params
        $_tempBody = null;
if (isset($body)) {
            $_tempBody = $body;
        }
if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }
// this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
$defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

/**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
