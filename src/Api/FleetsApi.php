<?php
/**
 * FleetsApi
 * PHP version 5
 *
 * @category Class
 * @package  EsiClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.3.8
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace EsiClient\EsiClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use EsiClient\ApiException;
use EsiClient\Configuration;
use EsiClient\HeaderSelector;
use EsiClient\ObjectSerializer;

/**
 * FleetsApi Class Doc Comment
 *
 * @category Class
 * @package  EsiClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FleetsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteFleetsFleetIdMembersMemberId
     *
     * Kick fleet member
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $member_id The character ID of a member in this fleet (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteFleetsFleetIdMembersMemberId($fleet_id, $member_id, $datasource = 'tranquility', $token = null)
    {
        $this->deleteFleetsFleetIdMembersMemberIdWithHttpInfo($fleet_id, $member_id, $datasource, $token);
    }

    /**
     * Operation deleteFleetsFleetIdMembersMemberIdWithHttpInfo
     *
     * Kick fleet member
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $member_id The character ID of a member in this fleet (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFleetsFleetIdMembersMemberIdWithHttpInfo($fleet_id, $member_id, $datasource = 'tranquility', $token = null)
    {
        $returnType = '';
        $request = $this->deleteFleetsFleetIdMembersMemberIdRequest($fleet_id, $member_id, $datasource, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\DeleteFleetsFleetIdMembersMemberIdNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteFleetsFleetIdMembersMemberIdAsync
     *
     * Kick fleet member
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $member_id The character ID of a member in this fleet (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFleetsFleetIdMembersMemberIdAsync($fleet_id, $member_id, $datasource = 'tranquility', $token = null)
    {
        return $this->deleteFleetsFleetIdMembersMemberIdAsyncWithHttpInfo($fleet_id, $member_id, $datasource, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteFleetsFleetIdMembersMemberIdAsyncWithHttpInfo
     *
     * Kick fleet member
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $member_id The character ID of a member in this fleet (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFleetsFleetIdMembersMemberIdAsyncWithHttpInfo($fleet_id, $member_id, $datasource = 'tranquility', $token = null)
    {
        $returnType = '';
        $request = $this->deleteFleetsFleetIdMembersMemberIdRequest($fleet_id, $member_id, $datasource, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteFleetsFleetIdMembersMemberId'
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $member_id The character ID of a member in this fleet (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteFleetsFleetIdMembersMemberIdRequest($fleet_id, $member_id, $datasource = 'tranquility', $token = null)
    {
        // verify the required parameter 'fleet_id' is set
        if ($fleet_id === null || (is_array($fleet_id) && count($fleet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fleet_id when calling deleteFleetsFleetIdMembersMemberId'
            );
        }
        // verify the required parameter 'member_id' is set
        if ($member_id === null || (is_array($member_id) && count($member_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $member_id when calling deleteFleetsFleetIdMembersMemberId'
            );
        }

        $resourcePath = '/v1/fleets/{fleet_id}/members/{member_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = ObjectSerializer::toQueryValue($datasource);
        }
        // query params
        if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token);
        }

        // path params
        if ($fleet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fleet_id' . '}',
                ObjectSerializer::toPathValue($fleet_id),
                $resourcePath
            );
        }
        // path params
        if ($member_id !== null) {
            $resourcePath = str_replace(
                '{' . 'member_id' . '}',
                ObjectSerializer::toPathValue($member_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteFleetsFleetIdSquadsSquadId
     *
     * Delete fleet squad
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $squad_id The squad to delete (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteFleetsFleetIdSquadsSquadId($fleet_id, $squad_id, $datasource = 'tranquility', $token = null)
    {
        $this->deleteFleetsFleetIdSquadsSquadIdWithHttpInfo($fleet_id, $squad_id, $datasource, $token);
    }

    /**
     * Operation deleteFleetsFleetIdSquadsSquadIdWithHttpInfo
     *
     * Delete fleet squad
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $squad_id The squad to delete (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFleetsFleetIdSquadsSquadIdWithHttpInfo($fleet_id, $squad_id, $datasource = 'tranquility', $token = null)
    {
        $returnType = '';
        $request = $this->deleteFleetsFleetIdSquadsSquadIdRequest($fleet_id, $squad_id, $datasource, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\DeleteFleetsFleetIdSquadsSquadIdNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteFleetsFleetIdSquadsSquadIdAsync
     *
     * Delete fleet squad
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $squad_id The squad to delete (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFleetsFleetIdSquadsSquadIdAsync($fleet_id, $squad_id, $datasource = 'tranquility', $token = null)
    {
        return $this->deleteFleetsFleetIdSquadsSquadIdAsyncWithHttpInfo($fleet_id, $squad_id, $datasource, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteFleetsFleetIdSquadsSquadIdAsyncWithHttpInfo
     *
     * Delete fleet squad
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $squad_id The squad to delete (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFleetsFleetIdSquadsSquadIdAsyncWithHttpInfo($fleet_id, $squad_id, $datasource = 'tranquility', $token = null)
    {
        $returnType = '';
        $request = $this->deleteFleetsFleetIdSquadsSquadIdRequest($fleet_id, $squad_id, $datasource, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteFleetsFleetIdSquadsSquadId'
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $squad_id The squad to delete (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteFleetsFleetIdSquadsSquadIdRequest($fleet_id, $squad_id, $datasource = 'tranquility', $token = null)
    {
        // verify the required parameter 'fleet_id' is set
        if ($fleet_id === null || (is_array($fleet_id) && count($fleet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fleet_id when calling deleteFleetsFleetIdSquadsSquadId'
            );
        }
        // verify the required parameter 'squad_id' is set
        if ($squad_id === null || (is_array($squad_id) && count($squad_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $squad_id when calling deleteFleetsFleetIdSquadsSquadId'
            );
        }

        $resourcePath = '/v1/fleets/{fleet_id}/squads/{squad_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = ObjectSerializer::toQueryValue($datasource);
        }
        // query params
        if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token);
        }

        // path params
        if ($fleet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fleet_id' . '}',
                ObjectSerializer::toPathValue($fleet_id),
                $resourcePath
            );
        }
        // path params
        if ($squad_id !== null) {
            $resourcePath = str_replace(
                '{' . 'squad_id' . '}',
                ObjectSerializer::toPathValue($squad_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteFleetsFleetIdWingsWingId
     *
     * Delete fleet wing
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $wing_id The wing to delete (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteFleetsFleetIdWingsWingId($fleet_id, $wing_id, $datasource = 'tranquility', $token = null)
    {
        $this->deleteFleetsFleetIdWingsWingIdWithHttpInfo($fleet_id, $wing_id, $datasource, $token);
    }

    /**
     * Operation deleteFleetsFleetIdWingsWingIdWithHttpInfo
     *
     * Delete fleet wing
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $wing_id The wing to delete (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFleetsFleetIdWingsWingIdWithHttpInfo($fleet_id, $wing_id, $datasource = 'tranquility', $token = null)
    {
        $returnType = '';
        $request = $this->deleteFleetsFleetIdWingsWingIdRequest($fleet_id, $wing_id, $datasource, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\DeleteFleetsFleetIdWingsWingIdNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteFleetsFleetIdWingsWingIdAsync
     *
     * Delete fleet wing
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $wing_id The wing to delete (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFleetsFleetIdWingsWingIdAsync($fleet_id, $wing_id, $datasource = 'tranquility', $token = null)
    {
        return $this->deleteFleetsFleetIdWingsWingIdAsyncWithHttpInfo($fleet_id, $wing_id, $datasource, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteFleetsFleetIdWingsWingIdAsyncWithHttpInfo
     *
     * Delete fleet wing
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $wing_id The wing to delete (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFleetsFleetIdWingsWingIdAsyncWithHttpInfo($fleet_id, $wing_id, $datasource = 'tranquility', $token = null)
    {
        $returnType = '';
        $request = $this->deleteFleetsFleetIdWingsWingIdRequest($fleet_id, $wing_id, $datasource, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteFleetsFleetIdWingsWingId'
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $wing_id The wing to delete (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteFleetsFleetIdWingsWingIdRequest($fleet_id, $wing_id, $datasource = 'tranquility', $token = null)
    {
        // verify the required parameter 'fleet_id' is set
        if ($fleet_id === null || (is_array($fleet_id) && count($fleet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fleet_id when calling deleteFleetsFleetIdWingsWingId'
            );
        }
        // verify the required parameter 'wing_id' is set
        if ($wing_id === null || (is_array($wing_id) && count($wing_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wing_id when calling deleteFleetsFleetIdWingsWingId'
            );
        }

        $resourcePath = '/v1/fleets/{fleet_id}/wings/{wing_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = ObjectSerializer::toQueryValue($datasource);
        }
        // query params
        if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token);
        }

        // path params
        if ($fleet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fleet_id' . '}',
                ObjectSerializer::toPathValue($fleet_id),
                $resourcePath
            );
        }
        // path params
        if ($wing_id !== null) {
            $resourcePath = str_replace(
                '{' . 'wing_id' . '}',
                ObjectSerializer::toPathValue($wing_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCharactersCharacterIdFleet
     *
     * Get character fleet info
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EsiClient\EsiClient\Model\GetCharactersCharacterIdFleetOk
     */
    public function getCharactersCharacterIdFleet($character_id, $datasource = 'tranquility', $if_none_match = null, $token = null)
    {
        list($response) = $this->getCharactersCharacterIdFleetWithHttpInfo($character_id, $datasource, $if_none_match, $token);
        return $response;
    }

    /**
     * Operation getCharactersCharacterIdFleetWithHttpInfo
     *
     * Get character fleet info
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EsiClient\EsiClient\Model\GetCharactersCharacterIdFleetOk, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCharactersCharacterIdFleetWithHttpInfo($character_id, $datasource = 'tranquility', $if_none_match = null, $token = null)
    {
        $returnType = '\EsiClient\EsiClient\Model\GetCharactersCharacterIdFleetOk';
        $request = $this->getCharactersCharacterIdFleetRequest($character_id, $datasource, $if_none_match, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\GetCharactersCharacterIdFleetOk',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\GetCharactersCharacterIdFleetNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCharactersCharacterIdFleetAsync
     *
     * Get character fleet info
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdFleetAsync($character_id, $datasource = 'tranquility', $if_none_match = null, $token = null)
    {
        return $this->getCharactersCharacterIdFleetAsyncWithHttpInfo($character_id, $datasource, $if_none_match, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCharactersCharacterIdFleetAsyncWithHttpInfo
     *
     * Get character fleet info
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCharactersCharacterIdFleetAsyncWithHttpInfo($character_id, $datasource = 'tranquility', $if_none_match = null, $token = null)
    {
        $returnType = '\EsiClient\EsiClient\Model\GetCharactersCharacterIdFleetOk';
        $request = $this->getCharactersCharacterIdFleetRequest($character_id, $datasource, $if_none_match, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCharactersCharacterIdFleet'
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCharactersCharacterIdFleetRequest($character_id, $datasource = 'tranquility', $if_none_match = null, $token = null)
    {
        // verify the required parameter 'character_id' is set
        if ($character_id === null || (is_array($character_id) && count($character_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $character_id when calling getCharactersCharacterIdFleet'
            );
        }
        if ($character_id < 1) {
            throw new \InvalidArgumentException('invalid value for "$character_id" when calling FleetsApi.getCharactersCharacterIdFleet, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v1/characters/{character_id}/fleet/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = ObjectSerializer::toQueryValue($datasource);
        }
        // query params
        if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($character_id !== null) {
            $resourcePath = str_replace(
                '{' . 'character_id' . '}',
                ObjectSerializer::toPathValue($character_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFleetsFleetId
     *
     * Get fleet information
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EsiClient\EsiClient\Model\GetFleetsFleetIdOk
     */
    public function getFleetsFleetId($fleet_id, $datasource = 'tranquility', $if_none_match = null, $token = null)
    {
        list($response) = $this->getFleetsFleetIdWithHttpInfo($fleet_id, $datasource, $if_none_match, $token);
        return $response;
    }

    /**
     * Operation getFleetsFleetIdWithHttpInfo
     *
     * Get fleet information
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EsiClient\EsiClient\Model\GetFleetsFleetIdOk, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFleetsFleetIdWithHttpInfo($fleet_id, $datasource = 'tranquility', $if_none_match = null, $token = null)
    {
        $returnType = '\EsiClient\EsiClient\Model\GetFleetsFleetIdOk';
        $request = $this->getFleetsFleetIdRequest($fleet_id, $datasource, $if_none_match, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\GetFleetsFleetIdOk',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\GetFleetsFleetIdNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFleetsFleetIdAsync
     *
     * Get fleet information
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFleetsFleetIdAsync($fleet_id, $datasource = 'tranquility', $if_none_match = null, $token = null)
    {
        return $this->getFleetsFleetIdAsyncWithHttpInfo($fleet_id, $datasource, $if_none_match, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFleetsFleetIdAsyncWithHttpInfo
     *
     * Get fleet information
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFleetsFleetIdAsyncWithHttpInfo($fleet_id, $datasource = 'tranquility', $if_none_match = null, $token = null)
    {
        $returnType = '\EsiClient\EsiClient\Model\GetFleetsFleetIdOk';
        $request = $this->getFleetsFleetIdRequest($fleet_id, $datasource, $if_none_match, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFleetsFleetId'
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getFleetsFleetIdRequest($fleet_id, $datasource = 'tranquility', $if_none_match = null, $token = null)
    {
        // verify the required parameter 'fleet_id' is set
        if ($fleet_id === null || (is_array($fleet_id) && count($fleet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fleet_id when calling getFleetsFleetId'
            );
        }

        $resourcePath = '/v1/fleets/{fleet_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = ObjectSerializer::toQueryValue($datasource);
        }
        // query params
        if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($fleet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fleet_id' . '}',
                ObjectSerializer::toPathValue($fleet_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFleetsFleetIdMembers
     *
     * Get fleet members
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  string $accept_language Language to use in the response (optional, default to en-us)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $language Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EsiClient\EsiClient\Model\GetFleetsFleetIdMembers200Ok[]
     */
    public function getFleetsFleetIdMembers($fleet_id, $accept_language = 'en-us', $datasource = 'tranquility', $if_none_match = null, $language = 'en-us', $token = null)
    {
        list($response) = $this->getFleetsFleetIdMembersWithHttpInfo($fleet_id, $accept_language, $datasource, $if_none_match, $language, $token);
        return $response;
    }

    /**
     * Operation getFleetsFleetIdMembersWithHttpInfo
     *
     * Get fleet members
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  string $accept_language Language to use in the response (optional, default to en-us)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $language Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EsiClient\EsiClient\Model\GetFleetsFleetIdMembers200Ok[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getFleetsFleetIdMembersWithHttpInfo($fleet_id, $accept_language = 'en-us', $datasource = 'tranquility', $if_none_match = null, $language = 'en-us', $token = null)
    {
        $returnType = '\EsiClient\EsiClient\Model\GetFleetsFleetIdMembers200Ok[]';
        $request = $this->getFleetsFleetIdMembersRequest($fleet_id, $accept_language, $datasource, $if_none_match, $language, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\GetFleetsFleetIdMembers200Ok[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\GetFleetsFleetIdMembersNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFleetsFleetIdMembersAsync
     *
     * Get fleet members
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  string $accept_language Language to use in the response (optional, default to en-us)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $language Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFleetsFleetIdMembersAsync($fleet_id, $accept_language = 'en-us', $datasource = 'tranquility', $if_none_match = null, $language = 'en-us', $token = null)
    {
        return $this->getFleetsFleetIdMembersAsyncWithHttpInfo($fleet_id, $accept_language, $datasource, $if_none_match, $language, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFleetsFleetIdMembersAsyncWithHttpInfo
     *
     * Get fleet members
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  string $accept_language Language to use in the response (optional, default to en-us)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $language Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFleetsFleetIdMembersAsyncWithHttpInfo($fleet_id, $accept_language = 'en-us', $datasource = 'tranquility', $if_none_match = null, $language = 'en-us', $token = null)
    {
        $returnType = '\EsiClient\EsiClient\Model\GetFleetsFleetIdMembers200Ok[]';
        $request = $this->getFleetsFleetIdMembersRequest($fleet_id, $accept_language, $datasource, $if_none_match, $language, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFleetsFleetIdMembers'
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  string $accept_language Language to use in the response (optional, default to en-us)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $language Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getFleetsFleetIdMembersRequest($fleet_id, $accept_language = 'en-us', $datasource = 'tranquility', $if_none_match = null, $language = 'en-us', $token = null)
    {
        // verify the required parameter 'fleet_id' is set
        if ($fleet_id === null || (is_array($fleet_id) && count($fleet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fleet_id when calling getFleetsFleetIdMembers'
            );
        }

        $resourcePath = '/v1/fleets/{fleet_id}/members/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = ObjectSerializer::toQueryValue($datasource);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language);
        }
        // query params
        if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($fleet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fleet_id' . '}',
                ObjectSerializer::toPathValue($fleet_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFleetsFleetIdWings
     *
     * Get fleet wings
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  string $accept_language Language to use in the response (optional, default to en-us)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $language Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EsiClient\EsiClient\Model\GetFleetsFleetIdWings200Ok[]
     */
    public function getFleetsFleetIdWings($fleet_id, $accept_language = 'en-us', $datasource = 'tranquility', $if_none_match = null, $language = 'en-us', $token = null)
    {
        list($response) = $this->getFleetsFleetIdWingsWithHttpInfo($fleet_id, $accept_language, $datasource, $if_none_match, $language, $token);
        return $response;
    }

    /**
     * Operation getFleetsFleetIdWingsWithHttpInfo
     *
     * Get fleet wings
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  string $accept_language Language to use in the response (optional, default to en-us)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $language Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EsiClient\EsiClient\Model\GetFleetsFleetIdWings200Ok[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getFleetsFleetIdWingsWithHttpInfo($fleet_id, $accept_language = 'en-us', $datasource = 'tranquility', $if_none_match = null, $language = 'en-us', $token = null)
    {
        $returnType = '\EsiClient\EsiClient\Model\GetFleetsFleetIdWings200Ok[]';
        $request = $this->getFleetsFleetIdWingsRequest($fleet_id, $accept_language, $datasource, $if_none_match, $language, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\GetFleetsFleetIdWings200Ok[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\GetFleetsFleetIdWingsNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFleetsFleetIdWingsAsync
     *
     * Get fleet wings
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  string $accept_language Language to use in the response (optional, default to en-us)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $language Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFleetsFleetIdWingsAsync($fleet_id, $accept_language = 'en-us', $datasource = 'tranquility', $if_none_match = null, $language = 'en-us', $token = null)
    {
        return $this->getFleetsFleetIdWingsAsyncWithHttpInfo($fleet_id, $accept_language, $datasource, $if_none_match, $language, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFleetsFleetIdWingsAsyncWithHttpInfo
     *
     * Get fleet wings
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  string $accept_language Language to use in the response (optional, default to en-us)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $language Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFleetsFleetIdWingsAsyncWithHttpInfo($fleet_id, $accept_language = 'en-us', $datasource = 'tranquility', $if_none_match = null, $language = 'en-us', $token = null)
    {
        $returnType = '\EsiClient\EsiClient\Model\GetFleetsFleetIdWings200Ok[]';
        $request = $this->getFleetsFleetIdWingsRequest($fleet_id, $accept_language, $datasource, $if_none_match, $language, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFleetsFleetIdWings'
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  string $accept_language Language to use in the response (optional, default to en-us)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string $language Language to use in the response, takes precedence over Accept-Language (optional, default to en-us)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getFleetsFleetIdWingsRequest($fleet_id, $accept_language = 'en-us', $datasource = 'tranquility', $if_none_match = null, $language = 'en-us', $token = null)
    {
        // verify the required parameter 'fleet_id' is set
        if ($fleet_id === null || (is_array($fleet_id) && count($fleet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fleet_id when calling getFleetsFleetIdWings'
            );
        }

        $resourcePath = '/v1/fleets/{fleet_id}/wings/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = ObjectSerializer::toQueryValue($datasource);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language);
        }
        // query params
        if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($fleet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fleet_id' . '}',
                ObjectSerializer::toPathValue($fleet_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postFleetsFleetIdMembers
     *
     * Create fleet invitation
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  \EsiClient\EsiClient\Model\PostFleetsFleetIdMembersInvitation $invitation Details of the invitation (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postFleetsFleetIdMembers($fleet_id, $invitation, $datasource = 'tranquility', $token = null)
    {
        $this->postFleetsFleetIdMembersWithHttpInfo($fleet_id, $invitation, $datasource, $token);
    }

    /**
     * Operation postFleetsFleetIdMembersWithHttpInfo
     *
     * Create fleet invitation
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  \EsiClient\EsiClient\Model\PostFleetsFleetIdMembersInvitation $invitation Details of the invitation (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postFleetsFleetIdMembersWithHttpInfo($fleet_id, $invitation, $datasource = 'tranquility', $token = null)
    {
        $returnType = '';
        $request = $this->postFleetsFleetIdMembersRequest($fleet_id, $invitation, $datasource, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\PostFleetsFleetIdMembersNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\PostFleetsFleetIdMembersUnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postFleetsFleetIdMembersAsync
     *
     * Create fleet invitation
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  \EsiClient\EsiClient\Model\PostFleetsFleetIdMembersInvitation $invitation Details of the invitation (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postFleetsFleetIdMembersAsync($fleet_id, $invitation, $datasource = 'tranquility', $token = null)
    {
        return $this->postFleetsFleetIdMembersAsyncWithHttpInfo($fleet_id, $invitation, $datasource, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postFleetsFleetIdMembersAsyncWithHttpInfo
     *
     * Create fleet invitation
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  \EsiClient\EsiClient\Model\PostFleetsFleetIdMembersInvitation $invitation Details of the invitation (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postFleetsFleetIdMembersAsyncWithHttpInfo($fleet_id, $invitation, $datasource = 'tranquility', $token = null)
    {
        $returnType = '';
        $request = $this->postFleetsFleetIdMembersRequest($fleet_id, $invitation, $datasource, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postFleetsFleetIdMembers'
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  \EsiClient\EsiClient\Model\PostFleetsFleetIdMembersInvitation $invitation Details of the invitation (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postFleetsFleetIdMembersRequest($fleet_id, $invitation, $datasource = 'tranquility', $token = null)
    {
        // verify the required parameter 'fleet_id' is set
        if ($fleet_id === null || (is_array($fleet_id) && count($fleet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fleet_id when calling postFleetsFleetIdMembers'
            );
        }
        // verify the required parameter 'invitation' is set
        if ($invitation === null || (is_array($invitation) && count($invitation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invitation when calling postFleetsFleetIdMembers'
            );
        }

        $resourcePath = '/v1/fleets/{fleet_id}/members/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = ObjectSerializer::toQueryValue($datasource);
        }
        // query params
        if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token);
        }

        // path params
        if ($fleet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fleet_id' . '}',
                ObjectSerializer::toPathValue($fleet_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($invitation)) {
            $_tempBody = $invitation;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postFleetsFleetIdWings
     *
     * Create fleet wing
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EsiClient\EsiClient\Model\PostFleetsFleetIdWingsCreated
     */
    public function postFleetsFleetIdWings($fleet_id, $datasource = 'tranquility', $token = null)
    {
        list($response) = $this->postFleetsFleetIdWingsWithHttpInfo($fleet_id, $datasource, $token);
        return $response;
    }

    /**
     * Operation postFleetsFleetIdWingsWithHttpInfo
     *
     * Create fleet wing
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EsiClient\EsiClient\Model\PostFleetsFleetIdWingsCreated, HTTP status code, HTTP response headers (array of strings)
     */
    public function postFleetsFleetIdWingsWithHttpInfo($fleet_id, $datasource = 'tranquility', $token = null)
    {
        $returnType = '\EsiClient\EsiClient\Model\PostFleetsFleetIdWingsCreated';
        $request = $this->postFleetsFleetIdWingsRequest($fleet_id, $datasource, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\PostFleetsFleetIdWingsCreated',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\PostFleetsFleetIdWingsNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postFleetsFleetIdWingsAsync
     *
     * Create fleet wing
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postFleetsFleetIdWingsAsync($fleet_id, $datasource = 'tranquility', $token = null)
    {
        return $this->postFleetsFleetIdWingsAsyncWithHttpInfo($fleet_id, $datasource, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postFleetsFleetIdWingsAsyncWithHttpInfo
     *
     * Create fleet wing
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postFleetsFleetIdWingsAsyncWithHttpInfo($fleet_id, $datasource = 'tranquility', $token = null)
    {
        $returnType = '\EsiClient\EsiClient\Model\PostFleetsFleetIdWingsCreated';
        $request = $this->postFleetsFleetIdWingsRequest($fleet_id, $datasource, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postFleetsFleetIdWings'
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postFleetsFleetIdWingsRequest($fleet_id, $datasource = 'tranquility', $token = null)
    {
        // verify the required parameter 'fleet_id' is set
        if ($fleet_id === null || (is_array($fleet_id) && count($fleet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fleet_id when calling postFleetsFleetIdWings'
            );
        }

        $resourcePath = '/v1/fleets/{fleet_id}/wings/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = ObjectSerializer::toQueryValue($datasource);
        }
        // query params
        if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token);
        }

        // path params
        if ($fleet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fleet_id' . '}',
                ObjectSerializer::toPathValue($fleet_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postFleetsFleetIdWingsWingIdSquads
     *
     * Create fleet squad
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $wing_id The wing_id to create squad in (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EsiClient\EsiClient\Model\PostFleetsFleetIdWingsWingIdSquadsCreated
     */
    public function postFleetsFleetIdWingsWingIdSquads($fleet_id, $wing_id, $datasource = 'tranquility', $token = null)
    {
        list($response) = $this->postFleetsFleetIdWingsWingIdSquadsWithHttpInfo($fleet_id, $wing_id, $datasource, $token);
        return $response;
    }

    /**
     * Operation postFleetsFleetIdWingsWingIdSquadsWithHttpInfo
     *
     * Create fleet squad
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $wing_id The wing_id to create squad in (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EsiClient\EsiClient\Model\PostFleetsFleetIdWingsWingIdSquadsCreated, HTTP status code, HTTP response headers (array of strings)
     */
    public function postFleetsFleetIdWingsWingIdSquadsWithHttpInfo($fleet_id, $wing_id, $datasource = 'tranquility', $token = null)
    {
        $returnType = '\EsiClient\EsiClient\Model\PostFleetsFleetIdWingsWingIdSquadsCreated';
        $request = $this->postFleetsFleetIdWingsWingIdSquadsRequest($fleet_id, $wing_id, $datasource, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\PostFleetsFleetIdWingsWingIdSquadsCreated',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\PostFleetsFleetIdWingsWingIdSquadsNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postFleetsFleetIdWingsWingIdSquadsAsync
     *
     * Create fleet squad
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $wing_id The wing_id to create squad in (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postFleetsFleetIdWingsWingIdSquadsAsync($fleet_id, $wing_id, $datasource = 'tranquility', $token = null)
    {
        return $this->postFleetsFleetIdWingsWingIdSquadsAsyncWithHttpInfo($fleet_id, $wing_id, $datasource, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postFleetsFleetIdWingsWingIdSquadsAsyncWithHttpInfo
     *
     * Create fleet squad
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $wing_id The wing_id to create squad in (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postFleetsFleetIdWingsWingIdSquadsAsyncWithHttpInfo($fleet_id, $wing_id, $datasource = 'tranquility', $token = null)
    {
        $returnType = '\EsiClient\EsiClient\Model\PostFleetsFleetIdWingsWingIdSquadsCreated';
        $request = $this->postFleetsFleetIdWingsWingIdSquadsRequest($fleet_id, $wing_id, $datasource, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postFleetsFleetIdWingsWingIdSquads'
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $wing_id The wing_id to create squad in (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postFleetsFleetIdWingsWingIdSquadsRequest($fleet_id, $wing_id, $datasource = 'tranquility', $token = null)
    {
        // verify the required parameter 'fleet_id' is set
        if ($fleet_id === null || (is_array($fleet_id) && count($fleet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fleet_id when calling postFleetsFleetIdWingsWingIdSquads'
            );
        }
        // verify the required parameter 'wing_id' is set
        if ($wing_id === null || (is_array($wing_id) && count($wing_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wing_id when calling postFleetsFleetIdWingsWingIdSquads'
            );
        }

        $resourcePath = '/v1/fleets/{fleet_id}/wings/{wing_id}/squads/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = ObjectSerializer::toQueryValue($datasource);
        }
        // query params
        if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token);
        }

        // path params
        if ($fleet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fleet_id' . '}',
                ObjectSerializer::toPathValue($fleet_id),
                $resourcePath
            );
        }
        // path params
        if ($wing_id !== null) {
            $resourcePath = str_replace(
                '{' . 'wing_id' . '}',
                ObjectSerializer::toPathValue($wing_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putFleetsFleetId
     *
     * Update fleet
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  \EsiClient\EsiClient\Model\PutFleetsFleetIdNewSettings $new_settings What to update for this fleet (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putFleetsFleetId($fleet_id, $new_settings, $datasource = 'tranquility', $token = null)
    {
        $this->putFleetsFleetIdWithHttpInfo($fleet_id, $new_settings, $datasource, $token);
    }

    /**
     * Operation putFleetsFleetIdWithHttpInfo
     *
     * Update fleet
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  \EsiClient\EsiClient\Model\PutFleetsFleetIdNewSettings $new_settings What to update for this fleet (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putFleetsFleetIdWithHttpInfo($fleet_id, $new_settings, $datasource = 'tranquility', $token = null)
    {
        $returnType = '';
        $request = $this->putFleetsFleetIdRequest($fleet_id, $new_settings, $datasource, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\PutFleetsFleetIdNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putFleetsFleetIdAsync
     *
     * Update fleet
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  \EsiClient\EsiClient\Model\PutFleetsFleetIdNewSettings $new_settings What to update for this fleet (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putFleetsFleetIdAsync($fleet_id, $new_settings, $datasource = 'tranquility', $token = null)
    {
        return $this->putFleetsFleetIdAsyncWithHttpInfo($fleet_id, $new_settings, $datasource, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putFleetsFleetIdAsyncWithHttpInfo
     *
     * Update fleet
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  \EsiClient\EsiClient\Model\PutFleetsFleetIdNewSettings $new_settings What to update for this fleet (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putFleetsFleetIdAsyncWithHttpInfo($fleet_id, $new_settings, $datasource = 'tranquility', $token = null)
    {
        $returnType = '';
        $request = $this->putFleetsFleetIdRequest($fleet_id, $new_settings, $datasource, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putFleetsFleetId'
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  \EsiClient\EsiClient\Model\PutFleetsFleetIdNewSettings $new_settings What to update for this fleet (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putFleetsFleetIdRequest($fleet_id, $new_settings, $datasource = 'tranquility', $token = null)
    {
        // verify the required parameter 'fleet_id' is set
        if ($fleet_id === null || (is_array($fleet_id) && count($fleet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fleet_id when calling putFleetsFleetId'
            );
        }
        // verify the required parameter 'new_settings' is set
        if ($new_settings === null || (is_array($new_settings) && count($new_settings) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $new_settings when calling putFleetsFleetId'
            );
        }

        $resourcePath = '/v1/fleets/{fleet_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = ObjectSerializer::toQueryValue($datasource);
        }
        // query params
        if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token);
        }

        // path params
        if ($fleet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fleet_id' . '}',
                ObjectSerializer::toPathValue($fleet_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($new_settings)) {
            $_tempBody = $new_settings;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putFleetsFleetIdMembersMemberId
     *
     * Move fleet member
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $member_id The character ID of a member in this fleet (required)
     * @param  \EsiClient\EsiClient\Model\PutFleetsFleetIdMembersMemberIdMovement $movement Details of the invitation (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putFleetsFleetIdMembersMemberId($fleet_id, $member_id, $movement, $datasource = 'tranquility', $token = null)
    {
        $this->putFleetsFleetIdMembersMemberIdWithHttpInfo($fleet_id, $member_id, $movement, $datasource, $token);
    }

    /**
     * Operation putFleetsFleetIdMembersMemberIdWithHttpInfo
     *
     * Move fleet member
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $member_id The character ID of a member in this fleet (required)
     * @param  \EsiClient\EsiClient\Model\PutFleetsFleetIdMembersMemberIdMovement $movement Details of the invitation (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putFleetsFleetIdMembersMemberIdWithHttpInfo($fleet_id, $member_id, $movement, $datasource = 'tranquility', $token = null)
    {
        $returnType = '';
        $request = $this->putFleetsFleetIdMembersMemberIdRequest($fleet_id, $member_id, $movement, $datasource, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\PutFleetsFleetIdMembersMemberIdNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\PutFleetsFleetIdMembersMemberIdUnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putFleetsFleetIdMembersMemberIdAsync
     *
     * Move fleet member
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $member_id The character ID of a member in this fleet (required)
     * @param  \EsiClient\EsiClient\Model\PutFleetsFleetIdMembersMemberIdMovement $movement Details of the invitation (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putFleetsFleetIdMembersMemberIdAsync($fleet_id, $member_id, $movement, $datasource = 'tranquility', $token = null)
    {
        return $this->putFleetsFleetIdMembersMemberIdAsyncWithHttpInfo($fleet_id, $member_id, $movement, $datasource, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putFleetsFleetIdMembersMemberIdAsyncWithHttpInfo
     *
     * Move fleet member
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $member_id The character ID of a member in this fleet (required)
     * @param  \EsiClient\EsiClient\Model\PutFleetsFleetIdMembersMemberIdMovement $movement Details of the invitation (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putFleetsFleetIdMembersMemberIdAsyncWithHttpInfo($fleet_id, $member_id, $movement, $datasource = 'tranquility', $token = null)
    {
        $returnType = '';
        $request = $this->putFleetsFleetIdMembersMemberIdRequest($fleet_id, $member_id, $movement, $datasource, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putFleetsFleetIdMembersMemberId'
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  int $member_id The character ID of a member in this fleet (required)
     * @param  \EsiClient\EsiClient\Model\PutFleetsFleetIdMembersMemberIdMovement $movement Details of the invitation (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putFleetsFleetIdMembersMemberIdRequest($fleet_id, $member_id, $movement, $datasource = 'tranquility', $token = null)
    {
        // verify the required parameter 'fleet_id' is set
        if ($fleet_id === null || (is_array($fleet_id) && count($fleet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fleet_id when calling putFleetsFleetIdMembersMemberId'
            );
        }
        // verify the required parameter 'member_id' is set
        if ($member_id === null || (is_array($member_id) && count($member_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $member_id when calling putFleetsFleetIdMembersMemberId'
            );
        }
        // verify the required parameter 'movement' is set
        if ($movement === null || (is_array($movement) && count($movement) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $movement when calling putFleetsFleetIdMembersMemberId'
            );
        }

        $resourcePath = '/v1/fleets/{fleet_id}/members/{member_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = ObjectSerializer::toQueryValue($datasource);
        }
        // query params
        if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token);
        }

        // path params
        if ($fleet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fleet_id' . '}',
                ObjectSerializer::toPathValue($fleet_id),
                $resourcePath
            );
        }
        // path params
        if ($member_id !== null) {
            $resourcePath = str_replace(
                '{' . 'member_id' . '}',
                ObjectSerializer::toPathValue($member_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($movement)) {
            $_tempBody = $movement;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putFleetsFleetIdSquadsSquadId
     *
     * Rename fleet squad
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  \EsiClient\EsiClient\Model\PutFleetsFleetIdSquadsSquadIdNaming $naming New name of the squad (required)
     * @param  int $squad_id The squad to rename (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putFleetsFleetIdSquadsSquadId($fleet_id, $naming, $squad_id, $datasource = 'tranquility', $token = null)
    {
        $this->putFleetsFleetIdSquadsSquadIdWithHttpInfo($fleet_id, $naming, $squad_id, $datasource, $token);
    }

    /**
     * Operation putFleetsFleetIdSquadsSquadIdWithHttpInfo
     *
     * Rename fleet squad
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  \EsiClient\EsiClient\Model\PutFleetsFleetIdSquadsSquadIdNaming $naming New name of the squad (required)
     * @param  int $squad_id The squad to rename (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putFleetsFleetIdSquadsSquadIdWithHttpInfo($fleet_id, $naming, $squad_id, $datasource = 'tranquility', $token = null)
    {
        $returnType = '';
        $request = $this->putFleetsFleetIdSquadsSquadIdRequest($fleet_id, $naming, $squad_id, $datasource, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\PutFleetsFleetIdSquadsSquadIdNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putFleetsFleetIdSquadsSquadIdAsync
     *
     * Rename fleet squad
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  \EsiClient\EsiClient\Model\PutFleetsFleetIdSquadsSquadIdNaming $naming New name of the squad (required)
     * @param  int $squad_id The squad to rename (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putFleetsFleetIdSquadsSquadIdAsync($fleet_id, $naming, $squad_id, $datasource = 'tranquility', $token = null)
    {
        return $this->putFleetsFleetIdSquadsSquadIdAsyncWithHttpInfo($fleet_id, $naming, $squad_id, $datasource, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putFleetsFleetIdSquadsSquadIdAsyncWithHttpInfo
     *
     * Rename fleet squad
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  \EsiClient\EsiClient\Model\PutFleetsFleetIdSquadsSquadIdNaming $naming New name of the squad (required)
     * @param  int $squad_id The squad to rename (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putFleetsFleetIdSquadsSquadIdAsyncWithHttpInfo($fleet_id, $naming, $squad_id, $datasource = 'tranquility', $token = null)
    {
        $returnType = '';
        $request = $this->putFleetsFleetIdSquadsSquadIdRequest($fleet_id, $naming, $squad_id, $datasource, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putFleetsFleetIdSquadsSquadId'
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  \EsiClient\EsiClient\Model\PutFleetsFleetIdSquadsSquadIdNaming $naming New name of the squad (required)
     * @param  int $squad_id The squad to rename (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putFleetsFleetIdSquadsSquadIdRequest($fleet_id, $naming, $squad_id, $datasource = 'tranquility', $token = null)
    {
        // verify the required parameter 'fleet_id' is set
        if ($fleet_id === null || (is_array($fleet_id) && count($fleet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fleet_id when calling putFleetsFleetIdSquadsSquadId'
            );
        }
        // verify the required parameter 'naming' is set
        if ($naming === null || (is_array($naming) && count($naming) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $naming when calling putFleetsFleetIdSquadsSquadId'
            );
        }
        // verify the required parameter 'squad_id' is set
        if ($squad_id === null || (is_array($squad_id) && count($squad_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $squad_id when calling putFleetsFleetIdSquadsSquadId'
            );
        }

        $resourcePath = '/v1/fleets/{fleet_id}/squads/{squad_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = ObjectSerializer::toQueryValue($datasource);
        }
        // query params
        if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token);
        }

        // path params
        if ($fleet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fleet_id' . '}',
                ObjectSerializer::toPathValue($fleet_id),
                $resourcePath
            );
        }
        // path params
        if ($squad_id !== null) {
            $resourcePath = str_replace(
                '{' . 'squad_id' . '}',
                ObjectSerializer::toPathValue($squad_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($naming)) {
            $_tempBody = $naming;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putFleetsFleetIdWingsWingId
     *
     * Rename fleet wing
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  \EsiClient\EsiClient\Model\PutFleetsFleetIdWingsWingIdNaming $naming New name of the wing (required)
     * @param  int $wing_id The wing to rename (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putFleetsFleetIdWingsWingId($fleet_id, $naming, $wing_id, $datasource = 'tranquility', $token = null)
    {
        $this->putFleetsFleetIdWingsWingIdWithHttpInfo($fleet_id, $naming, $wing_id, $datasource, $token);
    }

    /**
     * Operation putFleetsFleetIdWingsWingIdWithHttpInfo
     *
     * Rename fleet wing
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  \EsiClient\EsiClient\Model\PutFleetsFleetIdWingsWingIdNaming $naming New name of the wing (required)
     * @param  int $wing_id The wing to rename (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \EsiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putFleetsFleetIdWingsWingIdWithHttpInfo($fleet_id, $naming, $wing_id, $datasource = 'tranquility', $token = null)
    {
        $returnType = '';
        $request = $this->putFleetsFleetIdWingsWingIdRequest($fleet_id, $naming, $wing_id, $datasource, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\PutFleetsFleetIdWingsWingIdNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\EsiClient\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putFleetsFleetIdWingsWingIdAsync
     *
     * Rename fleet wing
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  \EsiClient\EsiClient\Model\PutFleetsFleetIdWingsWingIdNaming $naming New name of the wing (required)
     * @param  int $wing_id The wing to rename (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putFleetsFleetIdWingsWingIdAsync($fleet_id, $naming, $wing_id, $datasource = 'tranquility', $token = null)
    {
        return $this->putFleetsFleetIdWingsWingIdAsyncWithHttpInfo($fleet_id, $naming, $wing_id, $datasource, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putFleetsFleetIdWingsWingIdAsyncWithHttpInfo
     *
     * Rename fleet wing
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  \EsiClient\EsiClient\Model\PutFleetsFleetIdWingsWingIdNaming $naming New name of the wing (required)
     * @param  int $wing_id The wing to rename (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putFleetsFleetIdWingsWingIdAsyncWithHttpInfo($fleet_id, $naming, $wing_id, $datasource = 'tranquility', $token = null)
    {
        $returnType = '';
        $request = $this->putFleetsFleetIdWingsWingIdRequest($fleet_id, $naming, $wing_id, $datasource, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putFleetsFleetIdWingsWingId'
     *
     * @param  int $fleet_id ID for a fleet (required)
     * @param  \EsiClient\EsiClient\Model\PutFleetsFleetIdWingsWingIdNaming $naming New name of the wing (required)
     * @param  int $wing_id The wing to rename (required)
     * @param  string $datasource The server name you would like data from (optional, default to tranquility)
     * @param  string $token Access token to use if unable to set a header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putFleetsFleetIdWingsWingIdRequest($fleet_id, $naming, $wing_id, $datasource = 'tranquility', $token = null)
    {
        // verify the required parameter 'fleet_id' is set
        if ($fleet_id === null || (is_array($fleet_id) && count($fleet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fleet_id when calling putFleetsFleetIdWingsWingId'
            );
        }
        // verify the required parameter 'naming' is set
        if ($naming === null || (is_array($naming) && count($naming) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $naming when calling putFleetsFleetIdWingsWingId'
            );
        }
        // verify the required parameter 'wing_id' is set
        if ($wing_id === null || (is_array($wing_id) && count($wing_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wing_id when calling putFleetsFleetIdWingsWingId'
            );
        }

        $resourcePath = '/v1/fleets/{fleet_id}/wings/{wing_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($datasource !== null) {
            $queryParams['datasource'] = ObjectSerializer::toQueryValue($datasource);
        }
        // query params
        if ($token !== null) {
            $queryParams['token'] = ObjectSerializer::toQueryValue($token);
        }

        // path params
        if ($fleet_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fleet_id' . '}',
                ObjectSerializer::toPathValue($fleet_id),
                $resourcePath
            );
        }
        // path params
        if ($wing_id !== null) {
            $resourcePath = str_replace(
                '{' . 'wing_id' . '}',
                ObjectSerializer::toPathValue($wing_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($naming)) {
            $_tempBody = $naming;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
